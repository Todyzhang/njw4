AngularJS 用 Interceptors 来统一处理 HTTP 请求和响应
Web 开发中，除了数据操作之外，最频繁的就是发起和处理各种 HTTP 请求了，加上 HTTP 请求又是异步的，如果在每个请求中来单独捕获各种常规错误，处理各类自定义错误，那将会有大量的功能类似的代码，或者使用丑陋的方法在每个请求中调用某几个自定义的函数来处理。这两种方法基本都不是靠谱之选。好在 AngularJS 提供了 Interceptors ——拦截战斗机——来对应用内所有的 XHR 请求进行统一处理。

主要功能
Interceptors 有两个处理时机，分别是：

其它程序代码执行 HTTP 请求之后，在实际从浏览器发出请求之前，即处理请求
得到请求的响应之后，在交给其它程序代码处理之前，即处理请求的响应
所以，不难理解它可以用于如下几个方面：

全局处理错误
统一进行身份验证一类的处理
对所有发出去的请求进行预处理
对所有收到的响应进行预处理
做一些增强用户体验的操作，例如显示一个进度条
基本使用
先来看看最基本的使用：

var app = angular.module('app', []);

// 定义一个 Service ，稍等将会把它作为 Interceptors 的处理函数
app.factory('HttpInterceptor', ['$q', HttpInterceptor]);

function HttpInterceptor($q) {
  return {
    request: function(config){
      return config;
    },
    requestError: function(err){
      return $q.reject(err);
    },
    response: function(res){
      return res;
    },
    responseError: function(err){
      if(-1 === err.status) {
        // 远程服务器无响应
      } else if(500 === err.status) {
        // 处理各类自定义错误
      } else if(501 === err.status) {
        // ...
      }
      return $q.reject(err);
    }
  };
}

// 添加对应的 Interceptors
app.config(['$httpProvider', function($httpProvider){
  $httpProvider.interceptors.push(HttpInterceptor);
}]);
进一步了解
实际的 Interceptor 处理函数中， return 了一个包含四个成员的对象，这四个成员都 不是必须 的，可以按实际情况指定一二，分别如下：

request ：接收一个参数，它是 $http 中的标准 config 对象，同时也需要返回一个标准 config ，此时可以添加各类身份验证信息，同时也可在此启动进度条
requestError ：当有多个 Interceptor 的时候， requestError 会在前一个 Interceptor 抛出错误或者执行 $q.reject() 时执行，接收的参数就对应的错误
response ：接受一个请求对象参数，可以不处理就直接返回，此时也可以将进度条显示为成功完成，当然，如果后端 API 返回自定义错误时，HTTP 的状态码仍然是 200 得话，便在这里处理自定义错误，也可以对返回数据做一些处理，注意要将进度条置为完成
responseError ：这个是重头戏，即可以处理标准的 Http 错误，如服务器没有响应时，或者 PHP 之类的 CGI 经常出现的 502 一类，还可以处理 HTTP 状态码不是 200 的各类自定义错误
上面四个中，前两个是请求的前置处理，后两个是针对请求的响应的处理。




AngularJS的Provider, Value, Constant, Service, Factory, Decorator的区别与详解

最近，在项目中遇到需要在 config 阶段中注入一些service的情况，然而 factory，service 还有 value 是不能在 config 中注入的，先看一个清单:

服务/阶段	     provider	factory	service	value	constant
config阶段	   Yes	      No	   No	  No	  Yes
run 阶段	       Yes	      Yes	   Yes	  Yes	  Yes
注意，provider 在config阶段，注入的时候需要加上 provider 后缀，可以调用非 $get 返回的方法在 run 阶段注入的时候，无需加 provider 后缀，只能调用 $get 返回的方法


首先，provider, value, constant, service, factory他们都是provider！（decorator小朋友先搬个小板凳坐在边上等会儿，现在还没轮到你出场哈~）

provider是干啥的？

provider可以为应用提供通用的服务，形式可以是常量，也可以是对象。

比如我们在controller里常用的$http就是AngularJS框架提供的provider～

myApp.controller(‘MainController', function($scope, $http) {
   $http.get(…)
}
在上面的代码里，就可以直接使用$http包好的各种功能了～

provider
那我们自己想定制一个provider，怎么写呢～

//定义:
$provide.provider('age', {
    start: 10,
    $get: function() {
        return this.start + 2;
    }
});
//或
$provide.provider('age', function($filterProvider){
    this.start = 10;
    this.$get = function() {
        return this.start + 2;
    };
});
//调用:
app.controller('MainCtrl', function($scope, age) {
    $scope.age = age; //12
});
provider的基本原则就是通过实现$get方法来在应用中注入单例，使用的时候拿到的age就是$get执行后的结果。 上面例子中的两种定义方法都可以～

factory
大哥provider每次出场太繁琐了，如果我就想定义个$get，没别的乱七八糟的呢？这时候该二哥factory出场了～

$provide.provider('myDate', {
    $get: function() {
        return new Date();
    }
});
//可以写成
$provide.factory('myDate', function(){
    return new Date();
});
//调用:
app.controller('MainCtrl', function($scope, myDate) {
    $scope.myDate = myDate; //current date
});
直接第二个参数就是$get要对应的函数实现，代码简单了很多有没有？！

service
这时候我又来劲儿了，我不仅就想定义个$get，里面我还就返回个new出来的已有js类，三哥service闪亮登场～

$provide.provider('myDate', {
    $get: function() {
        return new Date();
    }
});
//可以写成
$provide.factory('myDate', function(){
    return new Date();
});
//可以写成
$provide.service('myDate', Date);
对于这种需求，代码更简洁了是不是～～

value vs. constant
更直接的需求来了，我只想定义个$get，而且就返回个常量～

这时候value和constant都可以做到～

$provide.value('pageCount', 7);
$provide.constant('pageCount', 7);
兄弟俩功能一样？双胞胎？那怎么可能～

介绍区别前，先得把之前坐小板凳等着的decorator叫出来～终于该出场了～

区别一：value可以被修改，constant一旦声明无法被修改
$provide.decorator('pageCount', function($delegate) {
    return $delegate + 1;
});
decorator可以用来修改（修饰）已定义的provider们，除了constant～

区别二：value不可在config里注入，constant可以
myApp.config(function(pageCount){
    //可以得到constant定义的'pageCount'
});
关于config，之后会专门介绍～

通过底层实现代码看关系～
function provider(name, provider_) {
    if (isFunction(provider_)) {
        provider_ = providerInjector.instantiate(provider_);
    }
    if (!provider_.$get) {
        throw Error('Provider ' + name + ' must define $get factory method.');
    }
    return providerCache[name + providerSuffix] = provider_;
}
 function factory(name, factoryFn) { return provider(name, { $get: factoryFn }); }
 function service(name, constructor) {
    return factory(name, ['$injector', function($injector) {
        return $injector.instantiate(constructor);
    }]);
}
 function value(name, value) { return factory(name, valueFn(value)); }
 function constant(name, value) {
    providerCache[name] = value;
    instanceCache[name] = value;
}
 function decorator(serviceName, decorFn) {
    var origProvider = providerInjector.get(serviceName + providerSuffix),
    orig$get = origProvider.$get;
    origProvider.$get = function() {
        var origInstance = instanceInjector.invoke(orig$get, origProvider);
        return instanceInjector.invoke(decorFn, null, {$delegate: origInstance});
    };
}
从上面的代码可以看出之前介绍的每种provider的特点，decorator比较特殊，不算，除了constant，另外几个最终调用的都是provider～

最后再总结一下provider哥儿几个的优点～
1. 为应用提供通用的服务，形式可以是常量或对象
2. 便于模块化
3. 便于单元测试


========================================
angular.forEach
1.针对对象循环(key,value)

var values = {name: 'misko', gender: 'male'};
var log = [];
angular.forEach(values, function(value, key) {
  this.push(key + ': ' + value);
}, log);




2.针对对象数组(key,value)
var objs =[{a:1},{a:2}];
angular.forEach(objs, function(data,index,array){
//data等价于array[index]
console.log(data.a+'='+array[index].a);
});

---------------------


